{"version":3,"sources":["assets/party-popper.jpg","logo.svg","ageCalc.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AgeCalc","date","today","Date","getTime","other","difference","Math","abs","days","floor","years","months","concat","react_default","a","createElement","this","props","timeSince","src","partybg","alt","className","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","newDate","birthday","console","log","setState","_this2","Form","inline","FormControl","type","onChange","event","target","value","Button","onClick","changeBirth","ageCalc","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sHCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0OCiCzBC,oLA7BJC,GAET,IAAIC,GAAQ,IAAIC,MAAOC,UACnBC,EAAQ,IAAIF,KAAKF,GAAMG,UACvBE,EAAaC,KAAKC,IAAIN,EAAQG,GAE9BI,EAAOF,KAAKG,MAAMJ,EAAU,OAC5BK,EAAQJ,KAAKG,MAAMD,EAAK,KAC5BA,GAAc,IAANE,EACR,IAAIC,EAASL,KAAKG,MAAMD,EAAK,IAG7B,OAFAA,GAAe,GAAPG,EAELD,GAASC,GAAUH,EAAO,EAC5B,GAAAI,OAAUF,EAAV,YAAAE,OAA0BD,EAA1B,aAAAC,OAA4CJ,EAA5C,SAEA,GAAAI,OAAU,EAAV,WAAsB,EAAtB,YAAmC,EAAnC,0CAID,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,6BAAqBC,KAAKC,MAAMjB,MAChCa,EAAAC,EAAAC,cAAA,8BAAsBC,KAAKE,UAAUF,KAAKC,MAAMjB,MAAhD,KACAa,EAAAC,EAAAC,cAAA,OAAKI,IAAKC,IAASC,IAAM,UAAUC,UAAY,oBAxB7BC,aCyCPC,cApCb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAV,KAAAQ,IACXC,EAAAC,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAd,QAEKe,MAAO,CACVC,QAAU,GACVC,SAAW,SALFR,6EAUXS,QAAQC,IAAInB,KAAKe,OACjBf,KAAKoB,SAAS,CAACH,SAAUjB,KAAKe,MAAMC,2CAE7B,IAAAK,EAAArB,KACP,OACEH,EAAAC,EAAAC,cAAA,OAAKO,UAAY,OACjBT,EAAAC,EAAAC,cAAA,kCACEF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,QAAM,GACV1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEC,KAAK,OACLC,SAAW,SAAAC,GAAK,OAAIN,EAAKD,SAAS,CAACJ,QAASW,EAAMC,OAAOC,WAG3DhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAQC,QAAW,kBAAMV,EAAKW,gBAA9B,UAGAnC,EAAAC,EAAAC,cAAA,OAAKO,UAAY,WACfT,EAAAC,EAAAC,cAACkC,EAAD,CAASjD,KAAQgB,KAAKe,MAAME,qBA5BtBV,aCKE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.215ac40b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/party-popper.4580939b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport partybg from './assets/party-popper.jpg';\r\n\r\nclass AgeCalc extends Component {\r\n\ttimeSince(date){\r\n\r\n\t\tlet today = new Date().getTime();\r\n\t\tlet other = new Date(date).getTime();\r\n\t\tlet difference = Math.abs(today - other);\r\n\r\n\t\tlet days = Math.floor(difference / (1000*3600*24));\r\n\t\tlet years = Math.floor(days/365);\r\n\t\tdays -= years*365;\r\n\t\tlet months = Math.floor(days/31);\r\n\t\tdays -= months*31;\r\n\r\n\t\tif(years || months || days > 0)\r\n\t\t\treturn `${years} years, ${months} months, ${days} days`\r\n\t\telse\r\n\t\t\treturn `${0} years, ${0} months, ${0} days`\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div> \r\n\t\t\t\t<h3>Entered Date is {this.props.date}</h3>\r\n\t\t\t\t<h4>Your details are {this.timeSince(this.props.date)}!</h4>\r\n\t\t\t\t<img src={partybg} alt = \"partybg\" className = \"partybg\"/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default AgeCalc;","import React, { Component } from 'react';\nimport { Form, FormControl, Button } from 'react-bootstrap';\nimport logo from './logo.svg';\nimport './App.css';\nimport AgeCalc from './ageCalc.js';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state ={\n      newDate : '',\n      birthday : '0-0-0'\n    }\n  }\n\n  changeBirth(){\n    console.log(this.state);\n    this.setState({birthday: this.state.newDate });\n  }\n  render() {\n    return (\n      <div className = 'App'>\n      <h2>Enter your birthday!</h2>\n        <Form inline>\n          <FormControl \n            type='date'\n            onChange ={event => this.setState({newDate: event.target.value })}\n          >\n          </FormControl>\n          <Button onClick = {() => this.changeBirth()}>\n            Submit\n          </Button>\n          <div className = 'display'>\n            <AgeCalc date = {this.state.birthday}/>\n          </div>\n\n        </Form>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}